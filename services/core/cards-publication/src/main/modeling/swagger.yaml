swagger: '2.0'
info:
  description: OperatorFabric Card Consumer Service
  version: 0.1.1.SNAPSHOT
  title: Card Management
  termsOfService: ''
  contact:
    email: boris.dolley_AT_rte-france.com
    url: 'https://opfab.github.io/'
  license:
    name: Mozilla Public License V2.0
    url: 'http://mozilla.org/MPL/2.0/'
host: localhost
basePath: /apis
tags:
  - name: cards
    description: Everything concerning cards
  - name: actions
    description: Everything concerning actions
  - name: read
    description: Everything concerning resource state
  - name: creation
    description: Everything concerning resource creation
  - name: deletion
    description: Everything concerning resource deletion
schemes:
  - http
definitions:
  EpochDate:
    type: object
    description: Number of milliseconds since Epoch (long integer)
    example: 1551868290379
  LongInteger:
    type: object
    description: Number of items
    example: 10
  CardOperationTypeEnum:
    type: string
    description: |-
      Type of operation >
      * ADD - Operation lists cards object to add
      * UPDATE - Operation lists cards object to update
      * DELETE - Operation lists card ids to delete
    enum:
      - ADD
      - UPDATE
      - DELETE
    example: ADD
  SeverityEnum:
    type: string
    description: >-
      Severity of the card subject >

      * ALARM - The process instance behind the card is in critical condition

      * ACTION - The process instance behind the card is expecting an action from the user

      * QUESTION - The process instance behind the card needs information from the user

      * NOTIFICATION - Purely informational card
    enum:
      - ALARM
      - ACTION
      - QUESTION
      - NOTIFICATION
    example: NOTIFICATION
  InputEnum:
    type: string
    description: |-
      Input type >
      * TEXT - A simple text input (size not limited)
      * LONGTEXT - A long text input (size not limited)
      * BOOLEAN - A boolean input
      * LIST - A list with one selectable value
      * MULTI_LIST - A list with multiple selectable values
      * SWITCH_LIST - Two lists with exchangeable values
      * STATIC - A static non editable parameter
    enum:
      - TEXT
      - LONGTEXT
      - BOOLEAN
      - LIST
      - MULTI_LIST
      - SWITCH_LIST
      - STATIC
    example: TEXT
  ActionEnum:
    type: string
    description: |-
      Action type >
      * INTERNAL - Internal OperatorFabric action
      * URI - Uri based action
      * JNLP - Uri based jnlp action
    enum:
      - INTERNAL
      - URI
      - JNLP
    example: URI
  TitlePositionEnum:
    type: string
    description: |-
      Possible title positions >
      * UP - At the top of the detail
      * DOWN - At the bottom of the detail
      * NONE - Not displayed
    enum:
      - UP
      - DOWN
      - NONE
    example: UP
  RecipientEnum:
    type: string
    description: >-
      Recipient type >

      * BROADCAST - Card is sent to everybody

      * DEADEND - Card is sent to no one (mostly for testing purposes)

      * GROUP - Card is sent to every user belonging to a group (identity)

      * USER - Card is sent to a single user (identity)

      * UNION - Card is sent to users according to the union of a recipient
      list  (recipients)

      * INTERSECT - Card is sent to users according to the intersection of a
      recipient list (recipients)

      * RANDOM - Card is sent to user as defined by underlying recipient
      (recipient) a random user is picked as the main recipient

      * WEIGHTED - Card is sent to users as defined by underlying recipient
      (recipient) a random user is picked as the main recipient. A favorite user
      (favorite) may be specified and is favored in the random choosing process.

      * FAVORITE - Card is sent to user as defined by underlying recipient
      (recipient), if favorite user (favorite) is in the computed users list it will
      be set as main recipient
    enum:
      - BROADCAST
      - DEADEND
      - GROUP
      - USER
      - UNION
      - INTERSECT
      - RANDOM
      - WEIGHTED
      - FAVORITE
    example: GROUP
  I18n:
    type: object
    description: describes an i18n label
    properties:
      key:
        type: string
        description: i18n client side key
      parameters:
        type: object
        description: Optional parameters
        additionalProperties:
          type: string
    example:
      key: title
      parameters:
        EN: MyTitle
        FR: MonTitre
  ParameterListItem:
    description: An item of list input parameter
    type: object
    properties:
      value:
        type: string
        description: parameter technical value
      label:
        $ref: '#/definitions/I18n'
        description: Value i18n label
    required:
      - value
    example:
      value: 42
      label:
        key: value1
        parameters:
          EN: the Answer to the Ultimate Question of Life, the Universe, and Everything
          FR: la Réponse à la Grande Question sur la vie, l'Univers et le Reste
  Input:
    description: Describe an input parameter for an Action
    type: object
    properties:
      type:
        $ref: '#/definitions/InputEnum'
        description: 'Parameter type, may imply some mandatory attributes, see description'
      label:
        $ref: '#/definitions/I18n'
        description: internationalized label
      mandatory:
        type: boolean
        default: false
        description: Is the parameter required
      name:
        type: string
        description: Parameter unique name for action
      value:
        type: string
        description: Parameter default value
      maxLength:
        type: integer
        description: >-
          Only for TEXT and LONGTEXT parameters. Specifies the maximum allowed
          character count
      rows:
        type: integer
        description: LONGTEXT parameter. Specifies the maximum number of displayed rows
      values:
        type: array
        description: >-
          Only for LIST,MULTI_LIST and SWITCH_LIST parameters. Specifies the
          selectable items in a list
        items:
          $ref: '#/definitions/ParameterListItem'
      selectedValues:
        type: array
        description: >-
          Only for MULTI_LIST and SWITCH_LIST parameters. List selected value.
          Order matters.
        items:
          type: string
      unSelectedValues:
        type: array
        description: Only for SWITCH_LIST parameters. List unselected values. Order matters.
        items:
          type: string
    required:
      - type
      - label
      - name
    example:
      type: LIST
      label:
        key: myCard.myAction.myInput.label
        parameters:
          EN: Colours
          FR: Couleurs
      mandatory: true
      name: selectedOption
      value:
        value: '#000000'
        label:
          key: black
          parameters:
            EN: Paint It Black
            FR: Peindre en noir
      values:
        - value: '#000000'
          label:
            key: black
            parameters:
              EN: Paint It Black
              FR: Peindre en noir
        - value: '#51CE1E'
          label:
            key: green
            parameters:
              EN: Go Green
              FR: Se mettre au vert
  Action:
    description: defines an action on card associated business process
    type: object
    properties:
      type:
        description: Action type
        $ref: '#/definitions/ActionEnum'
      lockAction:
        type: boolean
        default: false
        description: 'if true, action will be locked after clicked client-side'
      lockCard:
        type: boolean
        default: false
        description: 'if true, all card actions will be locked after clicked client-side'
      needsConfirm:
        type: boolean
        default: false
        description: 'if true, a confirmation will be asked before execution client-side'
      called:
        type: boolean
        default: false
        readOnly: true
        description: True if action has already been called at least once
      updateState:
        type: boolean
        default: false
        description: >-
          If true, client will attempt an update of ActionStatus before
          rendering
      updateStateBeforeAction:
        type: boolean
        default: false
        description: >-
          if true, client will attempt an update of ActionStatus before
          execution
      hidden:
        type: boolean
        default: false
        description: This action is hidden from card and is only available to details;
      contentStyle:
        type: string
        description: css classes of action button content (a &lt;i&gt; tag)
      buttonStyle:
        type: string
        description: css classes of action button
      label:
        description: 'button default label, appears as a tooltip'
        $ref: '#/definitions/I18n'
      inputs:
        description: >-
          list of action input parameters, generate a popup form upon action
          call
        type: array
        items:
          $ref: '#/definitions/Input'
    required:
      - type
      - label
    example:
      type: URI
      lockAction: true
      lockCard: true
      needsConfirm: false
      called: false
      updateState: false
      updateStateBeforeAction: false
      hidden: true
      contentStyle: buttonContent.css
      buttonStyle: button.css
      label:
        key: myCard.myAction.label
        parameters:
          EN: My action label
          FR: Mon intitule d'action
      inputs:
        - type: LIST
          label:
            key: myCard.myAction.myInput.label
            parameters:
              EN: Colours
              FR: Couleurs
          mandatory: true
          name: selectedOption
          value:
            value: '#000000'
            label:
              key: black
              parameters:
                EN: Paint It Black
                FR: Peindre en noir
          values:
            - value: '#000000'
              label:
                key: black
                parameters:
                  EN: Paint It Black
                  FR: Peindre en noir
            - value: '#51CE1E'
              label:
                key: green
                parameters:
                  EN: Go Green
                  FR: Se mettre au vert
        - type: LONGTEXT
          label:
            key: myCard.myAction.myInput2.label
            parameters:
              EN: Comment
              FR: Commentaire
          mandatory: false
          name: comment
          value: ''
          maxLength: 250
          rows: 10
  ActionStatus:
    type: object
    properties:
      unlock:
        type: boolean
        description: Unlock action button upon client return after action submission
        default: true
      disabled:
        type: boolean
        description: disable action button upon client return
        default: false
      label:
        description: 'updated button label, if null no change'
        $ref: '#/definitions/I18n'
      contentStyle:
        type: string
        description: css classes of action button content (a &lt;i&gt; tag)
      buttonStyle:
        type: string
        description: css classes of action button
      inputs:
        description: >-
          list of action input parameters, generate a popup form upon action
          call
        type: array
        items:
          $ref: '#/definitions/Input'
  CardCreationReport:
    type: object
    properties:
      count:
        type: integer
      message:
        type: string
    required:
      - count
      - message
  CardOperation:
    type: object
    properties:
      number:
        $ref: '#/definitions/LongInteger'
      publishDate:
        $ref: '#/definitions/EpochDate'
      type:
        $ref: '#/definitions/CardOperationTypeEnum'
      cardIds:
        type: array
        items:
          type: string
      cards:
        type: array
        items:
          $ref: '#/definitions/LightCard'
  Detail:
    description: detail defines html data rendering
    type: object
    properties:
      title:
        description: Card i18n title
        $ref: '#/definitions/I18n'
      titleStyle:
        description: css classes applied to title
        type: string
      titlePosition:
        description: Title position
        $ref: '#/definitions/TitlePositionEnum'
      templateName:
        description: >-
          template unique name as defined by Third Party Bundle in Third Party
          Service
        type: string
      styles:
        description: >-
          css files names to load as defined by Third Party Bundle in Third
          Party Service
        type: array
        items:
          type: string
    example:
      title:
        key: myCard.title
        parameters:
          EN: My card title
          FR: Mon titre de carte
        titlePosition: UP
        titleStyle: myTitleStyle.css
        templateName: template1
        styles:
          - bundleTest.css
          - otherStyle.css
  Recipient:
    description: Recipient object defines rules for recipient computation
    type: object
    properties:
      type:
        $ref: '#/definitions/RecipientEnum'
        description: >-
          Specifies the recipient type. Please note that BROADCAST and DEADEND
          do not expose any other properties
      recipients:
        type: array
        items:
          $ref: '#/definitions/Recipient'
        description: >-
          Used by INTERSECT, UNION with multiple Recipients. Used by FAVORITE,
          RANDOM, WEIGHTED for single Recipient
      identity:
        type: string
        description: 'Used by USER, GROUP, FAVORITE'
      preserveMain:
        description: >-
          If main users from the underlying recipients are to be propagated. Used by
          INTERSECT and UNION recipients.
        type: boolean
    example:
      type: UNION
      recipients:
        - type: INTERSECT
          recipients:
            - type: GROUP
              identity: myGroupA
            - type: GROUP
              identity: myGroupB
          preserveMain: true
        - type: USER
          identity: aGivenUser
      preserveMain: true
  Card:
    type: object
    description: A Card sums up information about the status of a given process instance of the publishing service
    properties:
      uid:
        type: string
        description: Unique card ID
        readOnly: true
      id:
        type: string
        description: Unique card ID (as defined in the associated process)
        readOnly: true
      publisher:
        type: string
        description: Publishing service unique ID
      publisherVersion:
        type: string
        description: Publishing service version
      processId:
        type: string
        description: Unique process ID of the associated process instance
      publishDate:
        $ref: '#/definitions/EpochDate'
        description: The date the card was published (meaning created by the card service)
        readOnly: true
      deletionDate:
        $ref: '#/definitions/EpochDate'
        description: The date the card was deleted
        readOnly: true
      lttd:
        $ref: '#/definitions/EpochDate'
        description: >-
          Last time to decide, after this date no action can be triggered
          on the card
      startDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity start time
      endDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity end time
      severity:
        $ref: '#/definitions/SeverityEnum'
        description: Card severity
      media:
        type: string
        description: Media unique ID for audio notification
      tags:
        type: array
        items:
          type: string
        description: Tags associated with the card
      actions:
        type: object
        description: 'Map of actions, identifying an action by its unique card related id'
        additionalProperties:
          $ref: '#/definitions/Action'
      details:
        type: array
        description: List of card associated details
        items:
          $ref: '#/definitions/Detail'
      title:
        description: Card i18n title
        $ref: '#/definitions/I18n'
      summary:
        description: Card i18n summary
        $ref: '#/definitions/I18n'
      recipient:
        description: Recipient computation rule
        $ref: '#/definitions/Recipient'
      mainRecipient:
        description: Main user recipient id (if any)
        type: string
        readOnly: true
      userRecipients:
        description: Complete list of user recipients at computation time
        readOnly: true
        type: array
        items:
          type: string
      groupRecipients:
        description: Complete list of group recipients at computation time
        readOnly: true
        type: array
        items:
          type: string
      data:
        type: object
        description: Business data
    required:
      - processId
      - publisher
      - publisherVersion
      - severity
      - startDate
      - title
      - summary
    example:
      uid: 12345
      id: cardIdFromMyProcess
      publisher: MyService
      publisherVersion: 0.0.1
      processId: MyProcess
      publishDate: 1546300800000
      deletionDate: 1546388200000
      lttd: 1546387230000
      startDate: 1546387200000
      endDate: 1546387250000
      severity: ACTION
      media: sound1.wav
      tags:
        - MyService
        - MyProcess
        - ACTION
      actions:
        - type: URI
          lockAction: true
          lockCard: true
          needsConfirm: false
          called: false
          updateState: false
          updateStateBeforeAction: false
          hidden: true
          contentStyle: buttonContent.css
          buttonStyle: button.css
          label:
            key: myCard.myAction.label
            parameters:
              EN: My action label
              FR: Mon intitule d'action
          inputs:
            - type: LIST
              label:
                key: myCard.myAction.myInput1.label
                parameters:
                  EN: Available options
                  FR: Options disponibles
              mandatory: true
              name: selectedOption
              value: plan B
              values:
                - plan A
                - plan B
                - plan C
            - type: LONGTEXT
              label:
                key: myCard.myAction.myInput2.label
                parameters:
                  EN: Comment
                  FR: Commentaire
              mandatory: false
              name: comment
              value: ''
              maxLength: 250
              rows: 10
      details:
        title:
          key: myCard.title
          parameters:
            EN: My card title
            FR: Mon titre de carte
        titlePosition: UP
        titleStyle: myTitleStyle.css
        templateName: template1
        styles:
          - bundleTest.css
          - otherStyle.css
      title:
        key: myservice.myprocess.title
        parameters:
          EN: My process name
          FR: Mon nom de processus
      summary:
        key: myservice.myprocess.title.summary
        parameters:
          EN: Summary of card content
          FR: Resume du contenu de la carte
      recipient:
        type: UNION
        recipients:
          - type: INTERSECT
            recipients:
              - type: GROUP
                identity: myGroupA
              - type: GROUP
                identity: myGroupB
            preserveMain: true
          - type: USER
            identity: aGivenUser
        preserveMain: true
  LightCard:
    type: object
    description: A Card gathers information about a process status
    readOnly: true
    properties:
      uid:
        type: string
        description: Unique card ID
      id:
        type: string
        description: Unique card ID for associated process
      publisher:
        type: string
        description: Publishing service unique ID
      publisherVersion:
        type: string
        description: Publishing service version
      processId:
        type: string
        description: Unique process ID for associated process
      lttd:
        $ref: '#/definitions/EpochDate'
        description: >-
          Last time to decide, once this date is passed no action can be triggered
          on the card
      startDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity start time
      endDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity end time
      severity:
        $ref: '#/definitions/SeverityEnum'
        description: Card severity
      media:
        type: string
        description: Media unique ID for audio notification
      tags:
        type: array
        items:
          type: string
        description: Card associated tags
      title:
        description: Card i18n title
        $ref: '#/definitions/I18n'
      summary:
        description: Card i18n summary
        $ref: '#/definitions/I18n'
      mainRecipient:
        description: main user recipient id if any
        type: string
        readOnly: true
    example:
      uid: 12345
      id: cardIdFromMyProcess
      publisher: MyService
      publisherVersion: 0.0.1
      processId: MyProcess
      lttd: 1546387230000
      startDate: 1546387200000
      endDate: 1546387250000
      severity: ACTION
      media: sound1.wav
      tags:
        - MyService
        - MyProcess
      title:
        key: myservice.myprocess.title
        parameters:
          EN: My process name
          FR: Mon nom de processus
      summary:
        key: myservice.myprocess.title.summary
        parameters:
          EN: Summary of card content
          FR: Resume du contenu de la carte
      mainRecipient: givenUser
paths:
  /async/cards:
    post:
      tags:
        - cards
        - creation
      summary: publish cards
      description: Publish one or more cards to OperatorFabric
      operationId: publishCardsAsync
      consumes:
        - application/json
      parameters:
        - name: cards
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      responses:
        '201':
          description: accepted
  /cardOperations:
    get:
      tags:
        - cards
        - read
      summary: fetch card operations
      description: >-
        fetch cards restricted to calling user. Fetched cards all comes with
        empty
      operationId: fetchCardOperations
      produces:
        - application/json
      parameters:
        - name: rangeStart
          type: integer
          in: query
          description: start of time range to get published card
        - name: rangeEnd
          type: integer
          in: query
          description: end of time range to get published card
        - name: notification
          type: boolean
          in: query
          default: false
          description: >-
            If true, connection is kept for notification of new cards (not
            related to the specified range)
        - name: clientId
          type: string
          in: query
          description: >-
            A unique id to identify client to allow for reconnection (an
            autogenerated UUID is the best solution)
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/CardOperation'
  /cards:
    get:
      tags:
        - cards
        - read
      summary: fetch cards
      description: >-
        fetch cards restricted to calling user. Fetched cards all comes with
        empty
      operationId: fetchCards
      produces:
        - application/json
      parameters:
        - name: from
          type: integer
          in: query
        - name: to
          type: integer
          in: query
        - name: startingPage
          type: integer
          in: query
        - name: pageSize
          type: integer
          in: query
        - name: published
          type: integer
          in: query
        - name: deleted
          type: boolean
          default: false
          in: query
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/LightCard'
    post:
      tags:
        - cards
        - creation
      summary: publish cards
      description: publish one or more card to OperatorFabric
      operationId: publishCards
      consumes:
        - application/json
      parameters:
        - name: cards
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      responses:
        '200':
          description: created
          schema:
            $ref: '#/definitions/CardCreationReport'
        '400':
          description: erroneous payload
          schema:
            $ref: '#/definitions/CardCreationReport'
  '/cards/{processId}':
    parameters:
      - in: path
        name: processId
        type: string
        required: true
    delete:
      operationId: deleteProcessCard
      tags:
        - cards
        - deletion
      summary: delete current card
      description: delete current card for process id
      responses:
        '200':
          description: OK
    get:
      operationId: fetchProcessCard
      tags:
        - cards
        - read
      summary: fetch current card
      description: fetch current card for process id
      responses:
        '200':
          description: OK
  '/cards/{processId}/actions/{actionKey}':
    parameters:
      - in: path
        name: processId
        type: string
        required: true
      - in: path
        name: actionKey
        type: string
        required: true
    get:
      operationId: fetchProcessCardAction
      tags:
        - cards
        - actions
        - read
      summary: Fetch action status
      description: >-
        Fetch an updated action status for action to update client side
        representation
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ActionStatus'
    put:
      operationId: triggerProcessCardAction
      tags:
        - cards
        - actions
      summary: Trigger action
      description: >-
        Trigger corresponding action in OperatorFabric, returns ActionStatus
        upon action realization
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ActionStatus'
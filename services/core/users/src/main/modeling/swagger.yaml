swagger: '2.0'
info:
  description: User Management Service for Operator Fabric
  version: 0.1.1.SNAPSHOT
  title: User Management
  termsOfService: ''
  contact:
    email: benoit.jeanson@rte-france.com
    url: https://opfab.github.io/
  license:
    name: Mozilla Public License V2.0
    url: 'http://mozilla.org/MPL/2.0/'
host: localhost
basePath: /apis
tags:
  - name: users
    description: Everything concerning users
  - name: groups
    description: Everything concerning groups
schemes:
  - http
definitions:
  SimpleUser:
    type: object
    description: User
    properties:
      login:
        type: string
        example: "jlcurtis"
      firstName:
        type: string
        example: "Jamie Lee"
      lastName:
        type: string
        example: "Curtis"
  User:
    type: object
    description: User
    properties:
      login:
        type: string
        example: "jcleese"
      firstName:
        type: string
        example: "John"
      lastName:
        type: string
        example: "Cleese"
      groups:
        type: array
        items:
          type: string
          uniqueItems: true
        example:
          - "Monty Python"
          - "Wanda"
  Group:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
    example:
      name: "Wanda"
      description: "They were not as successful in Fierce Creatures."
paths:
  /users:
    get:
      tags:
        - users
      summary: Fetch a list of all existing users
      description: 'Fetch a list of all existing users, with pagination and filter options'
      operationId: fetchUsers
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          examples:
            application/json: [{ "login": "jcleese", "firstName": "John", "lastName": "Cleese", "groups": ["Monty Python","Wanda"] }, { "login": "gchapman", "firstName": "Graham", "lastName": "Chapman", "groups": ["Monty Python"] }]
        '401':
          description: Authentication required
      security:
        - user_auth:
            - admin
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User to be created
          schema:
            $ref: '#/definitions/SimpleUser'
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/SimpleUser'
          examples:
            application/json: { "login": "jlcurtis", "firstName": "Jamie Lee", "lastName": "Curtis" }
        '401':
          description: Authentication required
  '/users/{login}':
    get:
      tags:
        - users
      summary: Fetch an existing user
      description: Fetch an existing user from their login
      operationId: fetchUser
      produces:
        - application/json
      parameters:
        - in: path
          name: login
          description: user login
          type: string
          required: true
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/User'
          examples:
            application/json: { "login": "gchapman", "firstName": "Graham", "lastName": "Chapman", "groups": ["Monty Python"] }
        '401':
          description: Authentication required
        '403':
          description: Authenticated users who are not admins can only access their own data
        '404':
          description: Required user not found
    put:
      tags:
        - users
      summary: Update an existing user
      description: Update an existing user
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: login
          description: user login
          type: string
          required: true
        - in: body
          name: user
          description: User to be updated
          schema:
            $ref: '#/definitions/SimpleUser'
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/SimpleUser'
          examples:
            application/json: { "login": "jlcurtis", "firstName": "Jamie Lee", "lastName": "Curtis" }
        '401':
          description: Authentication required
  /groups:
    get:
      tags:
        - groups
      summary: Fetch a list of all existing groups
      description: 'Fetch a list of all existing groups, with pagination and filter options'
      operationId: fetchGroups
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
          examples:
            application/json: [{ "name": "Wanda", "description": "They were not as successful in Fierce Creatures" } , { "name": "Marx Brothers", "description": "Chico, Groucho and Harpo, forget about Zeppo and Gummo" } ]
        '401':
          description: Unauthorized user
      security:
        - user_auth:
            - admin
    post:
      tags:
        - groups
      summary: Create a new group of users
      description: Create a new group of users
      operationId: createGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: group
          description: Group to be created
          schema:
            $ref: '#/definitions/Group'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Group'
          examples:
            application/json: { "name": "Wanda", "description": "They were not as successful in Fierce Creatures." }
        '401':
          description: Unauthorized user
      security:
        - user_auth:
            - admin
  '/groups/{name}':
    put:
      tags:
        - groups
      summary: Update an existing group of users
      description: Update an existing group of users
      operationId: updateGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: Group name
          type: string
          required: true
        - in: body
          name: group
          description: Group to be updated
          schema:
            $ref: '#/definitions/Group'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Group'
        '401':
          description: Unauthorized user
      security:
        - user_auth:
            - admin
    get:
      tags:
        - groups
      summary: Create a new group of users
      description: Create a new group of users
      operationId: fetchGroup
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: Group name
          type: string
          required: true
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Group'
          examples:
            application/json: { "name": "Wanda", "description": "They were not as successful in Fierce Creatures." }
        '401':
          description: Unauthorized user
      security:
        - user_auth:
            - admin
  '/groups/{name}/users':
    put:
      tags:
        - groups
        - users
      summary: Update list of group users
      description: 'Update list of group users, users not included in given list are removed from group'
      operationId: updateGroupUsers
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: name
          description: Group name
          type: string
          required: true
        - in: body
          name: users
          description: Array of user logins to be added
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: updated
      security:
        - user_auth:
            - admin
    post:
      tags:
        - groups
        - users
      summary: Adds users to group
      description: ONLY add users to group
      operationId: addGroupUsers
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: name
          description: Group name
          type: string
          required: true
        - in: body
          name: users
          description: Array of user login to be added
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: updated
      security:
        - user_auth:
            - admin
    delete:
      tags:
        - groups
        - users
      summary: Deletes users from group
      description: ONLY deletes users from group
      operationId: deleteGroupUsers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: Group name
          type: string
          required: true
        - in: body
          name: users
          description: Array of user login to be deleted
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: deleted
      security:
        - user_auth:
            - admin
securityDefinitions:
  user_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      read: access user data
      write: access user data
      admin: access sensitive data
      service: access user data only for service clients
  api_key:
    type: apiKey
    name: api_key
    in: header
